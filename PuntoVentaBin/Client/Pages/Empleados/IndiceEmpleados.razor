@page "/empleados"
@inject IManager manager
@inject IMostrarMensajes mostrarMensajes
@inject AuthenticationStateProvider auth
@attribute [Authorize(Roles = "permisos_propietario, permisos_administrador")]

<PageTitle>Empleados</PageTitle>

<h5 class="border-start border-2 ps-1">Usuarios</h5>
<p>
    Aquí podran crear, editar  y asignarles roles a los empleados.
    (Por el momento la aplicacion solo cuenta con un empleado unico, el propio usuario propietario.
    Se esta trabajando en sistema de roles.)
</p>

<div class="row g-2 mt-5">
    @*
    <div class="col-auto">
    <a class="btn btn-primary" href="/usuarios/crear">Nuevo Usuario</a>
    </div>*@
</div>

@* <ListadoGenerico Listado="Usuarios">
    <HayRegistros>
        <div class="table-responsive py-3">
            <table class="table table-sm table-bordered table-hover align-middle shadow-sm">
                <thead>
                    <tr class="table-primary text-center">
                        <th scope="col">Nombre Usuario</th>
                        <th scope="col">Correo Electronico</th>
                        <th scope="col">Rol</th>
                        <th scope="col">Permisos</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in UsuariosConRolId)
                    {
                        <tr class="bg-white text-center align-middle">
                            <td scope="row" class="text-start px-3">@usuario.Usuario.Nombre</td>
                            <td scope="row" class="text-start px-3">@usuario.Usuario.Email</td>
                            @if (usuario.RolId == 1)
                            {
                                <td>Propietario</td>

                            }
                            else if (usuario.RolId == 2)
                            {
                                <td>Administrador</td>
                            }
                           @*  <td scope="row" class="text-start px-3">
                                @foreach (var permiso in usuario.Usuario.Permisos)
                                {
                                    @permiso
                                }
                            </td> 

                            <td class="align-items-center">
                                <div class="row g-1 row-cols-1 row-cols-lg-2">
                                    <div class="col-auto">
                                        <button class="btn btn-sm btn-outline-danger" @onclick="(() => Borrar(usuario))" title="Eliminar Usuario">
                                            <i class="bi bi-trash3-fill"></i>
                                        </button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </HayRegistros>
</ListadoGenerico> *@

@code {
    // public List<UsuarioRolNegocio> UsuariosConRolId { get; set; }
    // private long usuarioId = new long();

    // protected override async Task OnInitializedAsync()
    // {
    //     await Cargar();
    // }

    // protected async Task Cargar()
    // {
    //     usuarioId = long.Parse((await auth.GetAuthenticationStateAsync()).User.Claims.First(c => c.Type == "UsuarioId").Value);

    //     var respuesta = await manager.Get<List<UsuarioRolNegocio>>($"api/empleados/{usuarioId}");
    //     UsuariosConRolId = respuesta.Datos;
    // }

    // protected async Task Borrar(UsuarioBin usuario)
    // {
    //     var respuesta = await manager.Post<UsuarioBin, long>($"api/usuarios/EliminarUsuario", usuario);

    //     if (respuesta.Estado == EstadosDeRespuesta.Error)
    //     {
    //         await mostrarMensajes.MostrarMensajeError(respuesta.Mensaje);
    //     }
    //     else
    //     {
    //         await Cargar();
    //     }
    // }
}