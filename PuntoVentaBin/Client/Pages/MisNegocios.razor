@page "/mis-negocios"
@inject IManager manager
@inject HttpClient http
@inject IMostrarMensajes mostrarMensajes
@inject IJSRuntime js
@inject ILoginService loginService
@inject NavigationManager navigate
@inject AuthenticationStateProvider auth

@if (procesando)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center mt-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Cargando...</p>
        </div>
    </div>
}
else
{
    <body>
        @* Navbar *@
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4 shadow-sm">
            <div class="container-fluid px-5 py-1">
                <a class="navbar-brand" href="#">Punto de Venta Bin</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                    <div class="d-flex">
                        <!-- Botón de Agregar Negocio -->
                        <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#modalNegocio"
                                @onclick="AgregarNuevoNegocio" aria-label="Agregar Negocio">
                            <i class="bi bi-plus-circle me-1"></i> Agregar Negocio
                        </button>
                        <!-- Botón de Perfil -->
                        <button class="btn btn-primary me-2" @onclick="IrAlPerfil" aria-label="Perfil">
                            <i class="bi bi-person-circle me-1"></i> Perfil
                        </button>
                        <!-- Botón de Cerrar Sesión -->
                        <button class="btn btn-warning" @onclick="Logout" aria-label="Cerrar Sesión">
                            <i class="bi bi-box-arrow-right me-1"></i> Cerrar Sesión
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <div class="container px-4 py-4">
            <h3 class="mb-4">Mis Negocios (Puedes entrar al negocio)</h3>
            <p>
                Este es el modelo del negocio que se ha tener en la aplicacion, actualmente no se puede editar ni agregar otro,
                estoy trabajando en la gestion del negocio, el sistema roles y que tipo de autorizacion a  tener cada
                usuario o emepleado (posiblemente haga cambios en el modelo de negocio).
            </p>
            <div class="row">

                @if (negocios is null)
                {
                    <p>Cargando...</p>
                }
                else if (negocios.Count == 0)
                {
                    <p>No hay negocios en base de datos...</p>
                }
                else
                {
                    @foreach (var negocio in negocios)
                    {
                        <div class="col-12 col-md-6 col-lg-3 mb-4">
                            <div class="card h-100">
                                <img src="/ImagenesIndex/ImagenesEjemplosMisNegocois/Abarrotes Delirio.jpeg" class="card-img-top" alt="Imagen de @negocio.Nombre">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@negocio.Nombre</h5>
                                    <p class="card-text">@negocio.TipoNegocio</p>
                                    <div class="mt-auto">
                                        <button class="btn btn-primary w-100 mb-2" data-bs-toggle="modal" data-bs-target="#modalNegocio"
                                                @onclick="() => EditarNegocio(negocio.Id)">
                                            <i class="bi bi-pencil-square me-2"></i> Editar
                                        </button>
                                        <button class="btn btn-outline-primary w-100" @onclick="() => EntrarNegocio(negocio.Id)">
                                            <i class="bi bi-box-arrow-in-right me-2"></i> Entrar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }


            </div>
        </div>


        <!-- Modal Nuevo Negocio-->
        <div class="modal fade" id="modalNegocio" data-bs-backdrop="static" data-bs-keyboard="false"
             tabindex="-1" aria-labelledby="modalNegocioLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="modalNegocioLabel">@TituloModalNegocio</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="negocioEdicion" OnValidSubmit="(() => GuardarCambiosNegocio())">
                            <DataAnnotationsValidator />

                            <label class="form-label">Nombre negocio:</label>
                            <div class="input-group input-group-lg mb-3">
                                @*                             <span class="input-group-text">
                            <i class="bi bi-file-person" style="font-size: 1.2rem;"></i>
                            </span> *@
                                <InputText type="text" class="form-control form-control-sm" @bind-Value="negocioEdicion.Nombre" />
                            </div>
                            <ValidationMessage For="(() => negocioEdicion.Nombre)" class="text-danger" />

                            <label class="form-label">Tipo Negocio:</label>
                            <div class="input-group input-group-lg mb-3">
                                @* <span class="input-group-text">
                            <i class="bi bi-file-person" style="font-size: 1.2rem;"></i>
                            </span> *@
                                <InputSelect class="form-select form-select-sm" @bind-Value="negocioEdicion.TipoNegocio">
                                    @foreach (var categoria in categorias)
                                    {
                                        <option value="@categoria">@categoria</option>
                                    }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="(() => negocioEdicion.TipoNegocio)" class="text-danger" />

                            <label class="form-label">CodigoPostal:</label>
                            <div class="input-group input-group-lg mb-3">
                                @* <span class="input-group-text">
                            <i class="bi bi-file-person" style="font-size: 1.2rem;"></i>
                            </span> *@
                                <InputText type="text" class="form-control form-control-sm" @bind-Value="negocioEdicion.CodigoPostal" />
                            </div>
                            <ValidationMessage For="(() => negocioEdicion.CodigoPostal)" class="text-danger" />
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-warning" data-bs-dismiss="modal">Cerrar</button>
                        <button type="submit" @onclick="(() => GuardarCambiosNegocio())" class="btn btn-primary">Guardar Negocio</button>
                    </div>
                </div>
            </div>
        </div>
    </body>
}




@code {
    [Parameter] public long UsuarioId { get; set; }
    private bool procesando = false;
    private string TituloModalNegocio = string.Empty;
    string mensajeLogin = string.Empty;

    private long usuarioId = new long();
    private UsuarioBin usuario = new UsuarioBin();
    private Negocio negocioEdicion = new Negocio();
    private List<Negocio> negocios;

    new List<string> categorias = new List<string>() { "Tienda de Abarrotes", "Papeleria" };

    string? estadoAutorizacionNegocio = null;

    protected override async Task OnInitializedAsync()
    {
        procesando = true;

        usuarioId = int.Parse((await auth.GetAuthenticationStateAsync()).User.Claims.First(c => c.Type == "AuthId").Value);
        estadoAutorizacionNegocio = (await auth.GetAuthenticationStateAsync()).User.Claims.First(c => c.Type == "Autorizacion").Value;

        if (estadoAutorizacionNegocio is not null)
        {
            if (estadoAutorizacionNegocio == "True")
            {
                navigate.NavigateTo("ventas");
            }
        }

        procesando = false;

        await CargarNegocio();

    }


    protected async Task CargarNegocio()
    {

        var respuesta = await manager.Get<List<Negocio>>($"/Negocios/{usuarioId}");

        if (respuesta.Estado == EstadosDeRespuesta.Correcto)
        {
            negocios = respuesta.Datos;
        }
        else
        {
            await mostrarMensajes.MostrarMensajeError(respuesta.Mensaje);
        }
    }


    private void IrAlPerfil()
    {
        navigate.NavigateTo("/perfil");
    }

    private async Task EntrarNegocio(long value)
    {
        procesando = true;

        var respuesta = await manager.Post<long, UserToken>("api/Autorizacion/SeleccionarNegocio", usuarioId);

        if (respuesta.Estado == EstadosDeRespuesta.Correcto)
        {
            await loginService.Login(respuesta.Datos.Token);
            navigate.NavigateTo("/ventas");
        }
        else if (respuesta.Estado == EstadosDeRespuesta.NoProceso)
        {
            mensajeLogin = respuesta.Mensaje;
            await mostrarMensajes.MostrarMensajeInformacion(mensajeLogin);
        }
        else if (respuesta.Estado == EstadosDeRespuesta.Error)
        {
            await mostrarMensajes.MostrarMensajeError(respuesta.Mensaje);
        }

        procesando = false;
    }



    private void AgregarNuevoNegocio()
    {
        TituloModalNegocio = "Nuevo Negocio";
        negocioEdicion = new Negocio();
    }

    private void EditarNegocio(long value)
    {
        TituloModalNegocio = "Nuevo Negocio";
        negocioEdicion = negocios.First(x => x.Id == value);
    }

    private async Task GuardarCambiosNegocio()
    {

        await mostrarMensajes.MostrarMensajeExitoso("Trabajando en este metodo :)");
        // procesando = true;

        // return;

        // var respuesta = await manager.Post<Negocio, long>("Negocios/GuardarNegocio", negocioEdicion);

        // if (respuesta.Estado == EstadosDeRespuesta.Correcto)
        // {
        //     await mostrarMensajes.MostrarMensajeExitoso(respuesta.Mensaje);
        //     navigate.NavigateTo("/login");
        // }
        // else if (respuesta.Estado == EstadosDeRespuesta.NoProceso)
        // {
        //     await mostrarMensajes.MostrarMensajeError("Peticion no procesada");
        // }
        // else if (respuesta.Estado == EstadosDeRespuesta.Error)
        // {
        //     await mostrarMensajes.MostrarMensajeError(respuesta.Mensaje);
        // }

        // procesando = false;
    }

    private void EliminarNegocio(long value)
    {
        // Lógica para agregar un nuevo negocio
    }

    private async Task Logout()
    {
        await loginService.Logout();
        var Tarea = Task.Run(() => navigate.NavigateTo("/"));
        await Tarea;
    }
}
