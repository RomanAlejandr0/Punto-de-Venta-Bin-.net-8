@page "/provedores/crear"
@inject IManager manager
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider auth
@inject IJSRuntime js
@attribute [Authorize(Roles = "permisos_propietario, permisos_administrador")]


<h3>Crear Provedor</h3>

<FormularioProvedores provedor="provedor" OnValidSubmit="Crear" Procesando="procesando"/>

@code {
	private Provedor provedor = new Provedor();
	private bool procesando = false;

	private async Task Crear()
	{ 
		procesando = true;

		bool confirmed = await js.Confirm("¿Guardar provedor?");

		if (confirmed)
		{

			provedor.NegocioId = long.Parse((await auth.GetAuthenticationStateAsync()).User.Claims.First(c => c.Type == "NegocioId").Value);

			var respuesta = await manager.Post<Provedor, long>("api/provedores/CrearProvedor", provedor);

			if (respuesta.Estado == EstadosDeRespuesta.Error)
			{
				await mostrarMensajes.MostrarMensajeError(respuesta.Mensaje);
			}
			else
			{
				navigationManager.NavigateTo("/provedores");
			}
		}
		procesando = false;
	}
}
